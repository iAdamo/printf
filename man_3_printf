Manpage for _printf().
man 3 "25/06/2023" "1.0" "_printf man page"
NAME
printf()
SYNOPSIS
#include "main.h"

Use the function with the specifiers (c, s, i, d, etc) after the %. If no identifier is present then the function prints the literal string.
DESCRIPTION
The function _printf() is responsible for producing output based on a format string that specifies the desired format. The output is generated by processing subsequent arguments or accessing arguments via variable-length argument facilities. The format string, which is a character string enclosed within its initial shift state, consists of directives and conversion specifications. Directives are ordinary characters (excluding %) that are directly copied to the output stream. Conversion specifications, introduced by the % character, fetch zero or more subsequent arguments. Each conversion specification may include flags, a minimum field width, a precision, and a length modifier in the specified order. The conversion specifiers determine the type of conversion to be applied.

       d, i   The int argument is converted to signed decimal notation.  The
              precision, if any, gives the minimum number of digits that
              must appear; if the converted value requires fewer digits, it
              is padded on the left with zeros.  The default precision is 1.
              When 0 is printed with an explicit precision 0, the output is
              empty.

       f      The double argument is rounded and converted to decimal nota‐
              tion.

       c      If no l modifier is present, the int argument is converted to
              an unsigned char, and the resulting character is written.

       s      If no l modifier is present: the const char * argument is
              expected to be a pointer to an array of character type
              (pointer to a string).  Characters from the array are written
              up to (but not including) a terminating null byte ('\0'); if a
              precision is specified, no more than the number specified are
              written.  If a precision is given, no null byte need be
              present; if the precision is not specified, or is greater than
              the size of the array, the array must contain a terminating
              null byte.

              for ls.  Don't use.

       %      A '%' is written.  No argument is converted.  The complete
              conversion specification is '%%'.

EXAMPLE
#include "main.h"
	 _printf("Printf, %s", "Project")
	 output: Printf, Project

RETURN VALUE
Upon successful return, these functions return the number of
characters printed (excluding the null byte used to end output to
strings).
If an output error is encountered, a negative value is returned.
SEE ALSO
printf(3).

AUTHOR
Adam Sanusi Babatunde & Damilola Ifabiyi.
